#include "memory.hpp"

static uint8 font_map[] =
{
  0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
  0x20, 0x60, 0x20, 0x20, 0x70, // 1
  0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
  0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
  0x90, 0x90, 0xF0, 0x10, 0x10, // 4
  0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
  0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
  0xF0, 0x10, 0x20, 0x40, 0x40, // 7
  0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
  0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
  0xF0, 0x90, 0xF0, 0x90, 0x90, // A
  0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
  0xF0, 0x80, 0x80, 0x80, 0xF0, // C
  0xE0, 0x90, 0x90, 0x90, 0xE0, // D
  0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
  0xF0, 0x80, 0xF0, 0x80, 0x80  // F
};

Memory::Memory()
{
  memory_size = 4096;
  memory = new uint8[memory_size];
  memset(memory,0x00,4096);
  memcpy(memory, font_map, sizeof(font_map));
}

Memory::~Memory()
{
  delete memory;
}


void Memory::LoadRom(std::string rom_name)
{
  std::ifstream game_file ("chip8_games/PONG", std::ios::in|std::ios::binary|std::ios::ate);
  int file_size = game_file.tellg();
  game_file.seekg (0, std::ios::beg);
  char * rom_start = (char *)(memory + 512);
  game_file.read (rom_start, file_size);
  game_file.close();
}


uint8 Memory::GetMemoryByte(uint16 memory_address)
{
  if ( memory_address < 0 || memory_address > memory_size )
  {
    return 0x00;
  }

  return memory[memory_address];
}


void Memory::SetMemoryByte(uint16 memory_address, uint8 write_data)
{
  if ( memory_address < 0 || memory_address > memory_size )
  {
    return;
  }

  memory[memory_address] = write_data;
}